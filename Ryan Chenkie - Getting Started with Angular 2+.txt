https://www.dropbox.com/sh/cing52gbww3aaxr/AAA6YPbgzZ3GDHAAtZkBgxMoa?dl=0
http://localhost/dev/ng2-cribs/

1)What We'll Build
Features of Angular2:
+ Repeater(ng-repeat): Very common in Single-Page-Apps: Takes a list of data & provides a single template for it & display data on screen
+ Forms
+ Pipes
+ HTTP-Implementation
+ Components, Services
+ TypeScript: Language Angular2 is written in
+ Observables

===========================================================================================================================================
2) Just Enough TypeScript
- Not strongly typed: There is no way to define the type (string, array...) of a variable and arguments/return of function

===========================================================================================================================================
3) Using the Angular CLI
Modern IS2015/2016 of JS and TS:
import
Decorators (@NgModule)
class
=> TypeScript is super-set of IS2015/2016

Angular is component-driven. Components have own TS-file & have template or view associated with it.
Angular has to has at least 1 module (root-module which bootstraps(=gets the application going))
Declare module for application: @NgModule-Decorator

Decorators (@NgModule):
+ give us a way to modify the behaviour of a class or a property.
+ classes: add meta-data to classes

===========================================================================================================================================
4) Anatomy of an Angular 2+ App
HOW TO SETUP ANATOMY of Angular2+ App:
# Change into Webserver-Directory
cd C:\xampp\htdocs\dev\
# Install AngularCLI (https://cli.angular.io/) globally:
npm install -g @angular/cli
# ng new: The Angular CLI makes it easy to create an application that already works, right out of the box. 
# It already follows our best practices!:
ng new ng2-cribs
# Change to directory:
cd ng2-cribs
[# ng serve: Easily test your app locally while developing.:]
[ng serve]
# ng g(generate) component:
ng g component crib-listing

===========================================================================================================================================
5) Repeating Over Data with ngFor
https://github.com/chenkie/ng2-cribs
# Change into ng2-cribs Directory
cd C:\xampp\htdocs\dev\ng2-cribs
# Easily test your app locally while developing.
ng serve
# WICHTIG: Nach jeder Datei-Änderung wird der Code neu gecheckt und auf Webserver unter http://localhost:4200/ deployed!
# Im Browser aufrufen: http://localhost:4200/

#Get BOOTSTRAP (https://getbootstrap.com/getting-started)
# Change into ng2-cribs Directory
cd C:\xampp\htdocs\dev\ng2-cribs
# Install BOOTSTRAP (--save: Save to package.json)
npm install bootstrap --save
# Register BOOTSTRAP in the angular-cli.json
      "styles": [
        "styles.css",
        "../node_modules/bootstrap/dist/css/bootstrap.css"
      ],
# Kill above ng serve process by CTRL+C & start new ng serve to see the BOOTSTRAP changes
ng serve
# Im Browser aufrufen: http://localhost:4200/

===========================================================================================================================================
6) Improving the Display with Bootstrap
VSCode Shortcuts:
//nav.navbar.navbar-default 	=> <nav class="navbar navbar-default"></nav>
//div.container-fluid		=> <div class="container-fluid"></div>
//.container 			=> <div class="container"></div>
//class="col-sm-4": Class commes with BOOTSTRAP, take up a 1/3 of total 12 column spaces accross page
//.thumbnail			=> <div class="thumbnail"></div>
//img				=> <img src="" alt="">

PIPES:
{{ crib.price | currency:'USD':true }}
| json

===========================================================================================================================================
7) Reusable Components
# ng g(generate) component:
ng g component crib-card

# Property Binding: mechanism that lets you pass data to into Components (ng g component)

===========================================================================================================================================
8) Implementing an Interface
# Interface: a class that describe how something should be shaped (what kind of keys & values it should contain)
ng g interface crib

===========================================================================================================================================
9) Switching to Http
# In Real-World you get Data with HTTP-Request for the data when App starts or Component is initialized
# move /data-Folder 1 Level up & rename cribs.ts to cribs.json

BIS 5:39